{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1","program":"/Users/haochenz/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","datafrog","--edition=2018","/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=db2cac1284b757de","-C","extra-filename=-db2cac1284b757de","--out-dir","/Users/haochenz/Desktop/fp_lab/polonius-engine-0.12.1/target/rls/debug/deps","-L","dependency=/Users/haochenz/Desktop/fp_lab/polonius-engine-0.12.1/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/haochenz/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/haochenz/Desktop/fp_lab/polonius-engine-0.12.1/target/rls/debug/deps/libdatafrog-db2cac1284b757de.rmeta"},"prelude":{"crate_id":{"name":"datafrog","disambiguator":[11920201410231973329,13830865123556477681]},"crate_root":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src","external_crates":[{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5019124190237856284,17171904952061180492]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6552575213732972370,4857478896615676938]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9368402477752345001,16510660328274119402]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11979046517868875526,4248718423519269454]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5389889921351115945,6106823979989002352]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5102824498363114698,15029250644106208139]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10214742290086477969,3950645503914115205]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[764992845537178953,4386711774585810915]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6726354693825255046,1562708793232137953]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13802537688027037173,7865830378773675775]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12634588057184811132,13278508508218871713]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5580722395240640672,9810153816205700700]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[451124501899321987,10206045407480806854]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[4126279991979072403,11569616848169612015]}},{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[11340853684256744004,5904187618095563547]}}],"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":0,"byte_end":20851,"line_start":1,"line_end":557,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":53},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":666,"byte_end":675,"line_start":23,"line_end":23,"column_start":22,"column_end":31},"alias_span":null,"name":"JoinInput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":721,"byte_end":731,"line_start":25,"line_end":25,"column_start":18,"column_end":28},"alias_span":null,"name":"ExtendAnti","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":205},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":750,"byte_end":760,"line_start":26,"line_end":26,"column_start":18,"column_end":28},"alias_span":null,"name":"ExtendWith","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":330},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":779,"byte_end":789,"line_start":27,"line_end":27,"column_start":18,"column_end":28},"alias_span":null,"name":"FilterAnti","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":289},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":808,"byte_end":818,"line_start":28,"line_end":28,"column_start":18,"column_end":28},"alias_span":null,"name":"FilterWith","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":834,"byte_end":846,"line_start":29,"line_end":29,"column_start":15,"column_end":27},"alias_span":null,"name":"PrefixFilter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":139},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":848,"byte_end":859,"line_start":29,"line_end":29,"column_start":29,"column_end":40},"alias_span":null,"name":"ValueFilter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":103},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":866,"byte_end":872,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"alias_span":null,"name":"Leaper","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":874,"byte_end":881,"line_start":30,"line_end":30,"column_start":13,"column_end":20},"alias_span":null,"name":"Leapers","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":883,"byte_end":897,"line_start":30,"line_end":30,"column_start":22,"column_end":36},"alias_span":null,"name":"RelationLeaper","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":0,"byte_end":20851,"line_start":1,"line_end":557,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":76},{"krate":0,"index":84},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":381},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":414},{"krate":0,"index":419},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":441},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":474}],"decl_id":null,"docs":" A lightweight Datalog engine in Rust","sig":null,"attributes":[{"value":"/ A lightweight Datalog engine in Rust","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":0,"byte_end":40,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":41,"byte_end":44,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The intended design is that one has static `Relation` types that are sets","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":45,"byte_end":122,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ of tuples, and `Variable` types that represent monotonically increasing","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":123,"byte_end":198,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ sets of tuples.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":199,"byte_end":218,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":219,"byte_end":222,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The types are mostly wrappers around `Vec<Tuple>` indicating sorted-ness,","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":223,"byte_end":300,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ and the intent is that this code can be dropped in the middle of an otherwise","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":301,"byte_end":382,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/ normal Rust program, run to completion, and then the results extracted as","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":383,"byte_end":460,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ vectors again.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":461,"byte_end":479,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"forbid(missing_docs)","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":481,"byte_end":505,"line_start":12,"line_end":12,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":53},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25520,"byte_end":25529,"line_start":138,"line_end":138,"column_start":11,"column_end":20},"name":"JoinInput","qualname":"::join::JoinInput","value":"JoinInput<'me, Tuple: Ord>: Copy","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"decl_id":null,"docs":" An input that can be used with `from_join`; either a `Variable` or a `Relation`.\n","sig":null,"attributes":[{"value":"/ An input that can be used with `from_join`; either a `Variable` or a `Relation`.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25425,"byte_end":25509,"line_start":137,"line_end":137,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":56},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25722,"byte_end":25734,"line_start":142,"line_end":142,"column_start":10,"column_end":22},"name":"RecentTuples","qualname":"::join::JoinInput::RecentTuples","value":"type RecentTuples: Deref<Target = [Tuple]>;","parent":{"krate":0,"index":53},"children":[],"decl_id":null,"docs":" If we are on iteration N of the loop, these are the tuples\n added on iteration N-1. (For a `Relation`, this is always an\n empty slice.)\n","sig":null,"attributes":[{"value":"/ If we are on iteration N of the loop, these are the tuples","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25559,"byte_end":25621,"line_start":139,"line_end":139,"column_start":5,"column_end":67}},{"value":"/ added on iteration N-1. (For a `Relation`, this is always an","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25626,"byte_end":25690,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/ empty slice.)","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25695,"byte_end":25712,"line_start":141,"line_end":141,"column_start":5,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":57},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25931,"byte_end":25943,"line_start":147,"line_end":147,"column_start":10,"column_end":22},"name":"StableTuples","qualname":"::join::JoinInput::StableTuples","value":"type StableTuples: Deref<Target = [Relation<Tuple>]>;","parent":{"krate":0,"index":53},"children":[],"decl_id":null,"docs":" If we are on iteration N of the loop, these are the tuples\n added on iteration N - 2 or before. (For a `Relation`, this is\n just `self`.)\n","sig":null,"attributes":[{"value":"/ If we are on iteration N of the loop, these are the tuples","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25766,"byte_end":25828,"line_start":144,"line_end":144,"column_start":5,"column_end":67}},{"value":"/ added on iteration N - 2 or before. (For a `Relation`, this is","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25833,"byte_end":25899,"line_start":145,"line_end":145,"column_start":5,"column_end":71}},{"value":"/ just `self`.)","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25904,"byte_end":25921,"line_start":146,"line_end":146,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":26026,"byte_end":26032,"line_start":150,"line_end":150,"column_start":8,"column_end":14},"name":"recent","qualname":"::join::JoinInput::recent","value":"pub fn recent(Self) -> Self::RecentTuples","parent":{"krate":0,"index":53},"children":[],"decl_id":null,"docs":" Get the set of recent tuples.\n","sig":null,"attributes":[{"value":"/ Get the set of recent tuples.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25985,"byte_end":26018,"line_start":149,"line_end":149,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":26108,"byte_end":26114,"line_start":153,"line_end":153,"column_start":8,"column_end":14},"name":"stable","qualname":"::join::JoinInput::stable","value":"pub fn stable(Self) -> Self::StableTuples","parent":{"krate":0,"index":53},"children":[],"decl_id":null,"docs":" Get the set of stable tuples.\n","sig":null,"attributes":[{"value":"/ Get the set of stable tuples.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":26067,"byte_end":26100,"line_start":152,"line_end":152,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35347,"byte_end":35354,"line_start":48,"line_end":48,"column_start":11,"column_end":18},"name":"Leapers","qualname":"::treefrog::Leapers","value":"Leapers<'leap, Tuple, Val>","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":" Implemented for a tuple of leapers\n","sig":null,"attributes":[{"value":"/ Implemented for a tuple of leapers","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35298,"byte_end":35336,"line_start":47,"line_end":47,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35408,"byte_end":35422,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"for_each_count","qualname":"::treefrog::Leapers::for_each_count","value":"pub fn for_each_count<impl FnMut(usize, usize): FnMut(usize, usize) ->\n                      ()>(&mut Self, &Tuple, impl FnMut(usize, usize))","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Internal method:\n","sig":null,"attributes":[{"value":"/ Internal method:","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35380,"byte_end":35400,"line_start":49,"line_end":49,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35513,"byte_end":35520,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"propose","qualname":"::treefrog::Leapers::propose","value":"pub fn propose(&mut Self, &Tuple, usize, &mut Vec<&'leap Val>)","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Internal method:\n","sig":null,"attributes":[{"value":"/ Internal method:","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35485,"byte_end":35505,"line_start":52,"line_end":52,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35629,"byte_end":35638,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"intersect","qualname":"::treefrog::Leapers::intersect","value":"pub fn intersect(&mut Self, &Tuple, usize, &mut Vec<&'leap Val>)","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Internal method:\n","sig":null,"attributes":[{"value":"/ Internal method:","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":35601,"byte_end":35621,"line_start":55,"line_end":55,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37383,"byte_end":37389,"line_start":110,"line_end":110,"column_start":11,"column_end":17},"name":"Leaper","qualname":"::treefrog::Leaper","value":"Leaper<'leap, Tuple, Val>","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" Methods to support treefrog leapjoin.\n","sig":null,"attributes":[{"value":"/ Methods to support treefrog leapjoin.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37331,"byte_end":37372,"line_start":109,"line_end":109,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37467,"byte_end":37472,"line_start":112,"line_end":112,"column_start":8,"column_end":13},"name":"count","qualname":"::treefrog::Leaper::count","value":"pub fn count(&mut Self, &Tuple) -> usize","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Estimates the number of proposed values.\n","sig":null,"attributes":[{"value":"/ Estimates the number of proposed values.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37415,"byte_end":37459,"line_start":111,"line_end":111,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37566,"byte_end":37573,"line_start":114,"line_end":114,"column_start":8,"column_end":15},"name":"propose","qualname":"::treefrog::Leaper::propose","value":"pub fn propose(&mut Self, &Tuple, &mut Vec<&'leap Val>)","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Populates `values` with proposed values.\n","sig":null,"attributes":[{"value":"/ Populates `values` with proposed values.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37514,"byte_end":37558,"line_start":113,"line_end":113,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37686,"byte_end":37695,"line_start":116,"line_end":116,"column_start":8,"column_end":17},"name":"intersect","qualname":"::treefrog::Leaper::intersect","value":"pub fn intersect(&mut Self, &Tuple, &mut Vec<&'leap Val>)","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Restricts `values` to proposed values.\n","sig":null,"attributes":[{"value":"/ Restricts `values` to proposed values.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37636,"byte_end":37678,"line_start":115,"line_end":115,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38236,"byte_end":38248,"line_start":129,"line_end":129,"column_start":16,"column_end":28},"name":"PrefixFilter","qualname":"::treefrog::filters::PrefixFilter","value":"PrefixFilter {  }","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":" A treefrog leaper that tests each of the tuples from the main\n input (the \"prefix\"). Use like `PrefixFilter::from(|tuple|\n ...)`; if the closure returns true, then the tuple is\n retained, else it will be ignored. This leaper can be used in\n isolation in which case it just acts like a filter on the\n input (the \"proposed value\" will be `()` type).\n","sig":null,"attributes":[{"value":"/ A treefrog leaper that tests each of the tuples from the main","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37834,"byte_end":37899,"line_start":123,"line_end":123,"column_start":5,"column_end":70}},{"value":"/ input (the \"prefix\"). Use like `PrefixFilter::from(|tuple|","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37904,"byte_end":37966,"line_start":124,"line_end":124,"column_start":5,"column_end":67}},{"value":"/ ...)`; if the closure returns true, then the tuple is","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":37971,"byte_end":38028,"line_start":125,"line_end":125,"column_start":5,"column_end":62}},{"value":"/ retained, else it will be ignored. This leaper can be used in","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38033,"byte_end":38098,"line_start":126,"line_end":126,"column_start":5,"column_end":70}},{"value":"/ isolation in which case it just acts like a filter on the","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38103,"byte_end":38164,"line_start":127,"line_end":127,"column_start":5,"column_end":66}},{"value":"/ input (the \"proposed value\" will be `()` type).","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38169,"byte_end":38220,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38541,"byte_end":38545,"line_start":139,"line_end":139,"column_start":16,"column_end":20},"name":"from","qualname":"<PrefixFilter<Tuple, Func>>::from","value":"pub fn from(Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new filter based on the prefix\n","sig":null,"attributes":[{"value":"/ Creates a new filter based on the prefix","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38481,"byte_end":38525,"line_start":138,"line_end":138,"column_start":9,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":139},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40773,"byte_end":40784,"line_start":201,"line_end":201,"column_start":16,"column_end":27},"name":"ValueFilter","qualname":"::treefrog::filters::ValueFilter","value":"ValueFilter {  }","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144}],"decl_id":null,"docs":" A treefrog leaper based on a predicate of prefix and value.\n Use like `ValueFilter::from(|tuple, value| ...)`. The closure\n should return true if `value` ought to be retained. The\n `value` will be a value proposed elsewhere by an `extend_with`\n leaper.","sig":null,"attributes":[{"value":"/ A treefrog leaper based on a predicate of prefix and value.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40368,"byte_end":40431,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/ Use like `ValueFilter::from(|tuple, value| ...)`. The closure","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40436,"byte_end":40501,"line_start":194,"line_end":194,"column_start":5,"column_end":70}},{"value":"/ should return true if `value` ought to be retained. The","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40506,"byte_end":40565,"line_start":195,"line_end":195,"column_start":5,"column_end":64}},{"value":"/ `value` will be a value proposed elsewhere by an `extend_with`","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40570,"byte_end":40636,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/ leaper.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40641,"byte_end":40652,"line_start":197,"line_end":197,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40657,"byte_end":40660,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This leaper cannot be used in isolation, it must be combined","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40665,"byte_end":40729,"line_start":199,"line_end":199,"column_start":5,"column_end":69}},{"value":"/ with other leapers.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40734,"byte_end":40757,"line_start":200,"line_end":200,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":41110,"byte_end":41114,"line_start":211,"line_end":211,"column_start":16,"column_end":20},"name":"from","qualname":"<ValueFilter<Tuple, Val, Func>>::from","value":"pub fn from(Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new filter based on the prefix\n","sig":null,"attributes":[{"value":"/ Creates a new filter based on the prefix","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":41050,"byte_end":41094,"line_start":210,"line_end":210,"column_start":9,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":160},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42059,"byte_end":42073,"line_start":240,"line_end":240,"column_start":11,"column_end":25},"name":"RelationLeaper","qualname":"::treefrog::RelationLeaper","value":"RelationLeaper<Key: Ord, Val: Ord>","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175}],"decl_id":null,"docs":" Extension method for relations.\n","sig":null,"attributes":[{"value":"/ Extension method for relations.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42013,"byte_end":42048,"line_start":239,"line_end":239,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42165,"byte_end":42176,"line_start":242,"line_end":242,"column_start":8,"column_end":19},"name":"extend_with","qualname":"::treefrog::RelationLeaper::extend_with","value":"pub fn extend_with<'leap, Tuple: Ord, Func: Fn(&Tuple) ->\n                   Key>(&'leap Self, Func) -> extend_with::ExtendWith where\nKey: 'leap, Val: 'leap","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" Extend with `Val` using the elements of the relation.\n","sig":null,"attributes":[{"value":"/ Extend with `Val` using the elements of the relation.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42100,"byte_end":42157,"line_start":241,"line_end":241,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42451,"byte_end":42462,"line_start":250,"line_end":250,"column_start":8,"column_end":19},"name":"extend_anti","qualname":"::treefrog::RelationLeaper::extend_anti","value":"pub fn extend_anti<'leap, Tuple: Ord, Func: Fn(&Tuple) ->\n                   Key>(&'leap Self, Func) -> extend_anti::ExtendAnti where\nKey: 'leap, Val: 'leap","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" Extend with `Val` using the complement of the relation.\n","sig":null,"attributes":[{"value":"/ Extend with `Val` using the complement of the relation.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42384,"byte_end":42443,"line_start":249,"line_end":249,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42736,"byte_end":42747,"line_start":258,"line_end":258,"column_start":8,"column_end":19},"name":"filter_with","qualname":"::treefrog::RelationLeaper::filter_with","value":"pub fn filter_with<'leap, Tuple: Ord, Func: Fn(&Tuple) ->\n                   (Key, Val)>(&'leap Self, Func) -> filter_with::FilterWith\nwhere Key: 'leap, Val: 'leap","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" Extend with any value if tuple is present in relation.\n","sig":null,"attributes":[{"value":"/ Extend with any value if tuple is present in relation.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42670,"byte_end":42728,"line_start":257,"line_end":257,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":43029,"byte_end":43040,"line_start":266,"line_end":266,"column_start":8,"column_end":19},"name":"filter_anti","qualname":"::treefrog::RelationLeaper::filter_anti","value":"pub fn filter_anti<'leap, Tuple: Ord, Func: Fn(&Tuple) ->\n                   (Key, Val)>(&'leap Self, Func) -> filter_anti::FilterAnti\nwhere Key: 'leap, Val: 'leap","parent":{"krate":0,"index":160},"children":[],"decl_id":null,"docs":" Extend with any value if tuple is absent from relation.\n","sig":null,"attributes":[{"value":"/ Extend with any value if tuple is absent from relation.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":42962,"byte_end":43021,"line_start":265,"line_end":265,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":205},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":44678,"byte_end":44688,"line_start":323,"line_end":323,"column_start":16,"column_end":26},"name":"ExtendWith","qualname":"::treefrog::extend_with::ExtendWith","value":"ExtendWith {  }","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"decl_id":null,"docs":" Wraps a Relation<Tuple> as a leaper.\n","sig":null,"attributes":[{"value":"/ Wraps a Relation<Tuple> as a leaper.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":44622,"byte_end":44662,"line_start":322,"line_end":322,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":45308,"byte_end":45312,"line_start":345,"line_end":345,"column_start":16,"column_end":20},"name":"from","qualname":"<ExtendWith>::from","value":"pub fn from(&'leap Relation<(Key, Val)>, Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a ExtendWith from a relation and key and value function.\n","sig":null,"attributes":[{"value":"/ Constructs a ExtendWith from a relation and key and value function.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":45221,"byte_end":45292,"line_start":344,"line_end":344,"column_start":9,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":254},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":47654,"byte_end":47664,"line_start":413,"line_end":413,"column_start":16,"column_end":26},"name":"ExtendAnti","qualname":"::treefrog::extend_anti::ExtendAnti","value":"ExtendAnti {  }","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":" Wraps a Relation<Tuple> as a leaper.\n","sig":null,"attributes":[{"value":"/ Wraps a Relation<Tuple> as a leaper.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":47598,"byte_end":47638,"line_start":412,"line_end":412,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":48242,"byte_end":48246,"line_start":433,"line_end":433,"column_start":16,"column_end":20},"name":"from","qualname":"<ExtendAnti>::from","value":"pub fn from(&'leap Relation<(Key, Val)>, Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a ExtendAnti from a relation and key and value function.\n","sig":null,"attributes":[{"value":"/ Constructs a ExtendAnti from a relation and key and value function.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":48155,"byte_end":48226,"line_start":432,"line_end":432,"column_start":9,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":49757,"byte_end":49767,"line_start":477,"line_end":477,"column_start":16,"column_end":26},"name":"FilterWith","qualname":"::treefrog::filter_with::FilterWith","value":"FilterWith {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" Wraps a Relation<Tuple> as a leaper.\n","sig":null,"attributes":[{"value":"/ Wraps a Relation<Tuple> as a leaper.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":49701,"byte_end":49741,"line_start":476,"line_end":476,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":50359,"byte_end":50363,"line_start":497,"line_end":497,"column_start":16,"column_end":20},"name":"from","qualname":"<FilterWith>::from","value":"pub fn from(&'leap Relation<(Key, Val)>, Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a FilterWith from a relation and key and value function.\n","sig":null,"attributes":[{"value":"/ Constructs a FilterWith from a relation and key and value function.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":50272,"byte_end":50343,"line_start":496,"line_end":496,"column_start":9,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":330},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":52439,"byte_end":52449,"line_start":563,"line_end":563,"column_start":16,"column_end":26},"name":"FilterAnti","qualname":"::treefrog::filter_anti::FilterAnti","value":"FilterAnti {  }","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" Wraps a Relation<Tuple> as a leaper.\n","sig":null,"attributes":[{"value":"/ Wraps a Relation<Tuple> as a leaper.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":52383,"byte_end":52423,"line_start":562,"line_end":562,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":53041,"byte_end":53045,"line_start":583,"line_end":583,"column_start":16,"column_end":20},"name":"from","qualname":"<FilterAnti>::from","value":"pub fn from(&'leap Relation<(Key, Val)>, Func) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a FilterAnti from a relation and key and value function.\n","sig":null,"attributes":[{"value":"/ Constructs a FilterAnti from a relation and key and value function.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":52954,"byte_end":53025,"line_start":582,"line_end":582,"column_start":9,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1180,"byte_end":1188,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"Relation","qualname":"::Relation","value":"Relation { elements }","parent":null,"children":[{"krate":0,"index":558}],"decl_id":null,"docs":" A static, ordered list of key-value pairs.","sig":null,"attributes":[{"value":"/ A static, ordered list of key-value pairs.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":903,"byte_end":949,"line_start":33,"line_end":33,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":950,"byte_end":953,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ A relation represents a fixed set of key-value pairs. In many places in a","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":954,"byte_end":1031,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ Datalog computation we want to be sure that certain relations are not able","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1032,"byte_end":1110,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/ to vary (for example, in antijoins).","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1111,"byte_end":1151,"line_start":37,"line_end":37,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":558},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1251,"byte_end":1259,"line_start":41,"line_end":41,"column_start":9,"column_end":17},"name":"elements","qualname":"::Relation::elements","value":"std::vec::Vec<Tuple>","parent":{"krate":0,"index":556},"children":[],"decl_id":null,"docs":" Sorted list of distinct tuples.\n","sig":null,"attributes":[{"value":"/ Sorted list of distinct tuples.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1207,"byte_end":1242,"line_start":40,"line_end":40,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1369,"byte_end":1374,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"merge","qualname":"<Relation<Tuple>>::merge","value":"pub fn merge(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Merges two relations into their union.\n","sig":null,"attributes":[{"value":"/ Merges two relations into their union.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1315,"byte_end":1357,"line_start":45,"line_end":45,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":3459,"byte_end":3468,"line_start":110,"line_end":110,"column_start":12,"column_end":21},"name":"from_iter","qualname":"<Relation<Tuple>>::from_iter","value":"pub fn from_iter<I>(I) -> Self where I: IntoIterator<Item = Tuple>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Relation` from the elements of the `iterator`.","sig":null,"attributes":[{"value":"/ Creates a `Relation` from the elements of the `iterator`.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":3301,"byte_end":3362,"line_start":107,"line_end":107,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":3367,"byte_end":3370,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Same as the `from_iter` method from `std::iter::FromIterator` trait.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":3375,"byte_end":3447,"line_start":109,"line_end":109,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":3702,"byte_end":3715,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"from_leapjoin","qualname":"<Relation<Tuple>>::from_leapjoin","value":"pub fn from_leapjoin<'leap, SourceTuple: Ord, Val: Ord + 'leap,\n                     impl Leapers<'leap, SourceTuple, Val>: Leapers,\n                     impl FnMut(&SourceTuple, &Val) -> Tuple: FnMut(&SourceTuple,\n                                                                    &Val) ->\n                     Tuple>(&Relation<SourceTuple>,\n                            impl Leapers<'leap, SourceTuple, Val>,\n                            impl FnMut(&SourceTuple, &Val) -> Tuple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Relation` using the `leapjoin` logic;\n see [`Variable::from_leapjoin`]\n","sig":null,"attributes":[{"value":"/ Creates a `Relation` using the `leapjoin` logic;","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":3598,"byte_end":3650,"line_start":117,"line_end":117,"column_start":5,"column_end":57}},{"value":"/ see [`Variable::from_leapjoin`]","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":3655,"byte_end":3690,"line_start":118,"line_end":118,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4232,"byte_end":4241,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"from_join","qualname":"<Relation<Tuple>>::from_join","value":"pub fn from_join<Key: Ord, Val1: Ord, Val2: Ord,\n                 impl FnMut(&Key, &Val1, &Val2) -> Tuple: FnMut(&Key, &Val1,\n                                                                &Val2) ->\n                 Tuple>(&Relation<(Key, Val1)>, &Relation<(Key, Val2)>,\n                        impl FnMut(&Key, &Val1, &Val2) -> Tuple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Relation` by joining the values from `input1` and\n `input2` and then applying `logic`. Like\n [`Variable::from_join`] except for use where the inputs are\n not varying across iterations.\n","sig":null,"attributes":[{"value":"/ Creates a `Relation` by joining the values from `input1` and","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4000,"byte_end":4064,"line_start":127,"line_end":127,"column_start":5,"column_end":69}},{"value":"/ `input2` and then applying `logic`. Like","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4069,"byte_end":4113,"line_start":128,"line_end":128,"column_start":5,"column_end":49}},{"value":"/ [`Variable::from_join`] except for use where the inputs are","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4118,"byte_end":4181,"line_start":129,"line_end":129,"column_start":5,"column_end":68}},{"value":"/ not varying across iterations.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4186,"byte_end":4220,"line_start":130,"line_end":130,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4800,"byte_end":4813,"line_start":144,"line_end":144,"column_start":12,"column_end":25},"name":"from_antijoin","qualname":"<Relation<Tuple>>::from_antijoin","value":"pub fn from_antijoin<Key: Ord, Val1: Ord,\n                     impl FnMut(&Key, &Val1) -> Tuple: FnMut(&Key, &Val1) ->\n                     Tuple>(&Relation<(Key, Val1)>, &Relation<Key>,\n                            impl FnMut(&Key, &Val1) -> Tuple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Relation` by removing all values from `input1` that\n share a key with `input2`, and then transforming the resulting\n tuples with the `logic` closure. Like\n [`Variable::from_antijoin`] except for use where the inputs\n are not varying across iterations.\n","sig":null,"attributes":[{"value":"/ Creates a `Relation` by removing all values from `input1` that","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4494,"byte_end":4560,"line_start":139,"line_end":139,"column_start":5,"column_end":71}},{"value":"/ share a key with `input2`, and then transforming the resulting","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4565,"byte_end":4631,"line_start":140,"line_end":140,"column_start":5,"column_end":71}},{"value":"/ tuples with the `logic` closure. Like","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4636,"byte_end":4677,"line_start":141,"line_end":141,"column_start":5,"column_end":46}},{"value":"/ [`Variable::from_antijoin`] except for use where the inputs","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4682,"byte_end":4745,"line_start":142,"line_end":142,"column_start":5,"column_end":68}},{"value":"/ are not varying across iterations.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":4750,"byte_end":4788,"line_start":143,"line_end":143,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5209,"byte_end":5217,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"from_map","qualname":"<Relation<Tuple>>::from_map","value":"pub fn from_map<T2: Ord, impl FnMut(&T2) -> Tuple: FnMut(&T2) ->\n                Tuple>(&Relation<T2>, impl FnMut(&T2) -> Tuple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new relation by mapping another one. Equivalent to\n creating an iterator but perhaps more convenient. Analogous to\n `Variable::from_map`.\n","sig":null,"attributes":[{"value":"/ Construct a new relation by mapping another one. Equivalent to","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5030,"byte_end":5096,"line_start":152,"line_end":152,"column_start":5,"column_end":71}},{"value":"/ creating an iterator but perhaps more convenient. Analogous to","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5101,"byte_end":5167,"line_start":153,"line_end":153,"column_start":5,"column_end":71}},{"value":"/ `Variable::from_map`.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5172,"byte_end":5197,"line_start":154,"line_end":154,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5406,"byte_end":5414,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<Relation<Tuple>>::from_vec","value":"pub fn from_vec(Vec<Tuple>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Relation` from a vector of tuples.\n","sig":null,"attributes":[{"value":"/ Creates a `Relation` from a vector of tuples.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5345,"byte_end":5394,"line_start":159,"line_end":159,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":423},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6585,"byte_end":6594,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"Iteration","qualname":"::Iteration","value":"Iteration {  }","parent":null,"children":[{"krate":0,"index":424}],"decl_id":null,"docs":" An iterative context for recursive evaluation.","sig":null,"attributes":[{"value":"/ An iterative context for recursive evaluation.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6335,"byte_end":6385,"line_start":198,"line_end":198,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6386,"byte_end":6389,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ An `Iteration` tracks monotonic variables, and monitors their progress.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6390,"byte_end":6465,"line_start":200,"line_end":200,"column_start":1,"column_end":76}},{"value":"/ It can inform the user if they have ceased changing, at which point the","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6466,"byte_end":6541,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/ computation should be done.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6542,"byte_end":6573,"line_start":202,"line_end":202,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6712,"byte_end":6715,"line_start":209,"line_end":209,"column_start":12,"column_end":15},"name":"new","qualname":"<Iteration>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterative context.\n","sig":null,"attributes":[{"value":"/ Create a new iterative context.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6665,"byte_end":6700,"line_start":208,"line_end":208,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6914,"byte_end":6921,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"changed","qualname":"<Iteration>::changed","value":"pub fn changed(&mut Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reports whether any of the monitored variables have changed since\n the most recent call.\n","sig":null,"attributes":[{"value":"/ Reports whether any of the monitored variables have changed since","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6803,"byte_end":6872,"line_start":214,"line_end":214,"column_start":5,"column_end":74}},{"value":"/ the most recent call.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6877,"byte_end":6902,"line_start":215,"line_end":215,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":7226,"byte_end":7234,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"variable","qualname":"<Iteration>::variable","value":"pub fn variable<Tuple: Ord + 'static>(&mut Self, &str) -> Variable<Tuple>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new named variable associated with the iterative context.\n","sig":null,"attributes":[{"value":"/ Creates a new named variable associated with the iterative context.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":7143,"byte_end":7214,"line_start":225,"line_end":225,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":7669,"byte_end":7688,"line_start":235,"line_end":235,"column_start":12,"column_end":31},"name":"variable_indistinct","qualname":"<Iteration>::variable_indistinct","value":"pub fn variable_indistinct<Tuple: Ord + 'static>(&mut Self, &str)\n-> Variable<Tuple>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new named variable associated with the iterative context.","sig":null,"attributes":[{"value":"/ Creates a new named variable associated with the iterative context.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":7429,"byte_end":7500,"line_start":231,"line_end":231,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":7505,"byte_end":7508,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ This variable will not be maintained distinctly, and may advertise tuples as","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":7513,"byte_end":7593,"line_start":233,"line_end":233,"column_start":5,"column_end":85}},{"value":"/ recent multiple times (perhaps unboundedly many times).","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":7598,"byte_end":7657,"line_start":234,"line_end":234,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":434},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9106,"byte_end":9114,"line_start":266,"line_end":266,"column_start":12,"column_end":20},"name":"Variable","qualname":"::Variable","value":"Variable { stable, recent }","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" An monotonically increasing set of `Tuple`s.","sig":null,"attributes":[{"value":"/ An monotonically increasing set of `Tuple`s.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8109,"byte_end":8157,"line_start":249,"line_end":249,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8158,"byte_end":8161,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ There are three stages in the lifecycle of a tuple:","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8162,"byte_end":8217,"line_start":251,"line_end":251,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8218,"byte_end":8221,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/   1. A tuple is added to `self.to_add`, but is not yet visible externally.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8222,"byte_end":8300,"line_start":253,"line_end":253,"column_start":1,"column_end":79}},{"value":"/   2. Newly added tuples are then promoted to `self.recent` for one iteration.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8301,"byte_end":8382,"line_start":254,"line_end":254,"column_start":1,"column_end":82}},{"value":"/   3. After one iteration, recent tuples are moved to `self.tuples` for posterity.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8383,"byte_end":8468,"line_start":255,"line_end":255,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8469,"byte_end":8472,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ Each time `self.changed()` is called, the `recent` relation is folded into `tuples`,","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8473,"byte_end":8561,"line_start":257,"line_end":257,"column_start":1,"column_end":89}},{"value":"/ and the `to_add` relations are merged, potentially deduplicated against `tuples`, and","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8562,"byte_end":8651,"line_start":258,"line_end":258,"column_start":1,"column_end":90}},{"value":"/ then made  `recent`. This way, across calls to `changed()` all added tuples are in","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8652,"byte_end":8738,"line_start":259,"line_end":259,"column_start":1,"column_end":87}},{"value":"/ `recent` at least once and eventually all are in `tuples`.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8739,"byte_end":8801,"line_start":260,"line_end":260,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8802,"byte_end":8805,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ A `Variable` may optionally be instructed not to de-duplicate its tuples, for reasons","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8806,"byte_end":8895,"line_start":262,"line_end":262,"column_start":1,"column_end":90}},{"value":"/ of performance. Such a variable cannot be relied on to terminate iterative computation,","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8896,"byte_end":8987,"line_start":263,"line_end":263,"column_start":1,"column_end":92}},{"value":"/ and it is important that any cycle of derivations have at least one de-duplicating","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":8988,"byte_end":9074,"line_start":264,"line_end":264,"column_start":1,"column_end":87}},{"value":"/ variable on it.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9075,"byte_end":9094,"line_start":265,"line_end":265,"column_start":1,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":438},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9334,"byte_end":9340,"line_start":272,"line_end":272,"column_start":9,"column_end":15},"name":"stable","qualname":"::Variable::stable","value":"std::rc::Rc<std::cell::RefCell<std::vec::Vec<Relation<Tuple>>>>","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" A list of relations whose union are the accepted tuples.\n","sig":null,"attributes":[{"value":"/ A list of relations whose union are the accepted tuples.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9265,"byte_end":9325,"line_start":271,"line_end":271,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":439},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9441,"byte_end":9447,"line_start":274,"line_end":274,"column_start":9,"column_end":15},"name":"recent","qualname":"::Variable::recent","value":"std::rc::Rc<std::cell::RefCell<Relation<Tuple>>>","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" A list of recent tuples, still to be processed.\n","sig":null,"attributes":[{"value":"/ A list of recent tuples, still to be processed.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9381,"byte_end":9432,"line_start":273,"line_end":273,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11474,"byte_end":11483,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"from_join","qualname":"<Variable<Tuple>>::from_join","value":"pub fn from_join<'me, K: Ord, V1: Ord, V2: Ord,\n                 impl JoinInput<'me, (K, V2)>: JoinInput,\n                 impl FnMut(&K, &V1, &V2) -> Tuple: FnMut(&K, &V1, &V2) ->\n                 Tuple>(&Self, &'me Variable<(K, V1)>,\n                        impl JoinInput<'me, (K, V2)>,\n                        impl FnMut(&K, &V1, &V2) -> Tuple)","parent":null,"children":[],"decl_id":null,"docs":" Adds tuples that result from joining `input1` and `input2` --\n each of the inputs must be a set of (Key, Value) tuples. Both\n `input1` and `input2` must have the same type of key (`K`) but\n they can have distinct value types (`V1` and `V2`\n respectively). The `logic` closure will be invoked for each\n key that appears in both inputs; it is also given the two\n values, and from those it should construct the resulting\n value.","sig":null,"attributes":[{"value":"/ Adds tuples that result from joining `input1` and `input2` --","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9648,"byte_end":9713,"line_start":281,"line_end":281,"column_start":5,"column_end":70}},{"value":"/ each of the inputs must be a set of (Key, Value) tuples. Both","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9718,"byte_end":9783,"line_start":282,"line_end":282,"column_start":5,"column_end":70}},{"value":"/ `input1` and `input2` must have the same type of key (`K`) but","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9788,"byte_end":9854,"line_start":283,"line_end":283,"column_start":5,"column_end":71}},{"value":"/ they can have distinct value types (`V1` and `V2`","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9859,"byte_end":9912,"line_start":284,"line_end":284,"column_start":5,"column_end":58}},{"value":"/ respectively). The `logic` closure will be invoked for each","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9917,"byte_end":9980,"line_start":285,"line_end":285,"column_start":5,"column_end":68}},{"value":"/ key that appears in both inputs; it is also given the two","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9985,"byte_end":10046,"line_start":286,"line_end":286,"column_start":5,"column_end":66}},{"value":"/ values, and from those it should construct the resulting","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10051,"byte_end":10111,"line_start":287,"line_end":287,"column_start":5,"column_end":65}},{"value":"/ value.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10116,"byte_end":10126,"line_start":288,"line_end":288,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10131,"byte_end":10134,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Note that `input1` must be a variable, but `input2` can be a","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10139,"byte_end":10203,"line_start":290,"line_end":290,"column_start":5,"column_end":69}},{"value":"/ relation or a variable. Therefore, you cannot join two","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10208,"byte_end":10266,"line_start":291,"line_end":291,"column_start":5,"column_end":63}},{"value":"/ relations with this method. This is not because the result","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10271,"byte_end":10333,"line_start":292,"line_end":292,"column_start":5,"column_end":67}},{"value":"/ would be wrong, but because it would be inefficient: the","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10338,"byte_end":10398,"line_start":293,"line_end":293,"column_start":5,"column_end":65}},{"value":"/ result from such a join cannot vary across iterations (as","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10403,"byte_end":10464,"line_start":294,"line_end":294,"column_start":5,"column_end":66}},{"value":"/ relations are fixed), so you should prefer to invoke `insert`","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10469,"byte_end":10534,"line_start":295,"line_end":295,"column_start":5,"column_end":70}},{"value":"/ on a relation created by `Relation::from_join` instead.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10539,"byte_end":10598,"line_start":296,"line_end":296,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10603,"byte_end":10606,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10611,"byte_end":10625,"line_start":298,"line_end":298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10630,"byte_end":10633,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This example starts a collection with the pairs (x, x+1) and (x+1, x) for x in 0 .. 10.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10638,"byte_end":10729,"line_start":300,"line_end":300,"column_start":5,"column_end":96}},{"value":"/ It then adds pairs (y, z) for which (x, y) and (x, z) are present. Because the initial","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10734,"byte_end":10824,"line_start":301,"line_end":301,"column_start":5,"column_end":95}},{"value":"/ pairs are symmetric, this should result in all pairs (x, y) for x and y in 0 .. 11.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10829,"byte_end":10916,"line_start":302,"line_end":302,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10921,"byte_end":10924,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10929,"byte_end":10936,"line_start":304,"line_end":304,"column_start":5,"column_end":12}},{"value":"/ use datafrog::{Iteration, Relation};","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10941,"byte_end":10981,"line_start":305,"line_end":305,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10986,"byte_end":10989,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ let mut iteration = Iteration::new();","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":10994,"byte_end":11035,"line_start":307,"line_end":307,"column_start":5,"column_end":46}},{"value":"/ let variable = iteration.variable::<(usize, usize)>(\"source\");","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11040,"byte_end":11106,"line_start":308,"line_end":308,"column_start":5,"column_end":71}},{"value":"/ variable.extend((0 .. 10).map(|x| (x, x + 1)));","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11111,"byte_end":11162,"line_start":309,"line_end":309,"column_start":5,"column_end":56}},{"value":"/ variable.extend((0 .. 10).map(|x| (x + 1, x)));","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11167,"byte_end":11218,"line_start":310,"line_end":310,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11223,"byte_end":11226,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ while iteration.changed() {","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11231,"byte_end":11262,"line_start":312,"line_end":312,"column_start":5,"column_end":36}},{"value":"/     variable.from_join(&variable, &variable, |&key, &val1, &val2| (val1, val2));","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11267,"byte_end":11351,"line_start":313,"line_end":313,"column_start":5,"column_end":89}},{"value":"/ }","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11356,"byte_end":11361,"line_start":314,"line_end":314,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11366,"byte_end":11369,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let result = variable.complete();","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11374,"byte_end":11411,"line_start":316,"line_end":316,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(result.len(), 121);","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11416,"byte_end":11450,"line_start":317,"line_end":317,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11455,"byte_end":11462,"line_start":318,"line_end":318,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12919,"byte_end":12932,"line_start":357,"line_end":357,"column_start":12,"column_end":25},"name":"from_antijoin","qualname":"<Variable<Tuple>>::from_antijoin","value":"pub fn from_antijoin<K: Ord, V: Ord,\n                     impl FnMut(&K, &V) -> Tuple: FnMut(&K, &V) ->\n                     Tuple>(&Self, &Variable<(K, V)>, &Relation<K>,\n                            impl FnMut(&K, &V) -> Tuple)","parent":null,"children":[],"decl_id":null,"docs":" Adds tuples from `input1` whose key is not present in `input2`.","sig":null,"attributes":[{"value":"/ Adds tuples from `input1` whose key is not present in `input2`.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11739,"byte_end":11806,"line_start":328,"line_end":328,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11811,"byte_end":11814,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Note that `input1` must be a variable: if you have a relation","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11819,"byte_end":11884,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/ instead, you can use `Relation::from_antijoin` and then","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11889,"byte_end":11948,"line_start":331,"line_end":331,"column_start":5,"column_end":64}},{"value":"/ `Variable::insert`.  Note that the result will not vary during","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":11953,"byte_end":12019,"line_start":332,"line_end":332,"column_start":5,"column_end":71}},{"value":"/ the iteration.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12024,"byte_end":12042,"line_start":333,"line_end":333,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12047,"byte_end":12050,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12055,"byte_end":12069,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12074,"byte_end":12077,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ This example starts a collection with the pairs (x, x+1) for x in 0 .. 10. It then","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12082,"byte_end":12168,"line_start":337,"line_end":337,"column_start":5,"column_end":91}},{"value":"/ adds any pairs (x+1,x) for which x is not a multiple of three. That excludes four","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12173,"byte_end":12258,"line_start":338,"line_end":338,"column_start":5,"column_end":90}},{"value":"/ pairs (for 0, 3, 6, and 9) which should leave us with 16 total pairs.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12263,"byte_end":12336,"line_start":339,"line_end":339,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12341,"byte_end":12344,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12349,"byte_end":12356,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ use datafrog::{Iteration, Relation};","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12361,"byte_end":12401,"line_start":342,"line_end":342,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12406,"byte_end":12409,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ let mut iteration = Iteration::new();","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12414,"byte_end":12455,"line_start":344,"line_end":344,"column_start":5,"column_end":46}},{"value":"/ let variable = iteration.variable::<(usize, usize)>(\"source\");","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12460,"byte_end":12526,"line_start":345,"line_end":345,"column_start":5,"column_end":71}},{"value":"/ variable.extend((0 .. 10).map(|x| (x, x + 1)));","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12531,"byte_end":12582,"line_start":346,"line_end":346,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12587,"byte_end":12590,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let relation: Relation<_> = (0 .. 10).filter(|x| x % 3 == 0).collect();","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12595,"byte_end":12670,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12675,"byte_end":12678,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ while iteration.changed() {","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12683,"byte_end":12714,"line_start":350,"line_end":350,"column_start":5,"column_end":36}},{"value":"/     variable.from_antijoin(&variable, &relation, |&key, &val| (val, key));","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12719,"byte_end":12797,"line_start":351,"line_end":351,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12802,"byte_end":12807,"line_start":352,"line_end":352,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12812,"byte_end":12815,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ let result = variable.complete();","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12820,"byte_end":12857,"line_start":354,"line_end":354,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(result.len(), 16);","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12862,"byte_end":12895,"line_start":355,"line_end":355,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":12900,"byte_end":12907,"line_start":356,"line_end":356,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14211,"byte_end":14219,"line_start":395,"line_end":395,"column_start":12,"column_end":20},"name":"from_map","qualname":"<Variable<Tuple>>::from_map","value":"pub fn from_map<T2: Ord, impl FnMut(&T2) -> Tuple: FnMut(&T2) ->\n                Tuple>(&Self, &Variable<T2>, impl FnMut(&T2) -> Tuple)","parent":null,"children":[],"decl_id":null,"docs":" Adds tuples that result from mapping `input`.","sig":null,"attributes":[{"value":"/ Adds tuples that result from mapping `input`.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13152,"byte_end":13201,"line_start":366,"line_end":366,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13206,"byte_end":13209,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13214,"byte_end":13228,"line_start":368,"line_end":368,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13233,"byte_end":13236,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This example starts a collection with the pairs (x, x) for x in 0 .. 10. It then","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13241,"byte_end":13325,"line_start":370,"line_end":370,"column_start":5,"column_end":89}},{"value":"/ repeatedly adds any pairs (x, z) for (x, y) in the collection, where z is the Collatz","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13330,"byte_end":13419,"line_start":371,"line_end":371,"column_start":5,"column_end":94}},{"value":"/ step for y: it is y/2 if y is even, and 3*y + 1 if y is odd. This produces all of the","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13424,"byte_end":13513,"line_start":372,"line_end":372,"column_start":5,"column_end":94}},{"value":"/ pairs (x, y) where x visits y as part of its Collatz journey.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13518,"byte_end":13583,"line_start":373,"line_end":373,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13588,"byte_end":13591,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13596,"byte_end":13603,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ use datafrog::{Iteration, Relation};","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13608,"byte_end":13648,"line_start":376,"line_end":376,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13653,"byte_end":13656,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ let mut iteration = Iteration::new();","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13661,"byte_end":13702,"line_start":378,"line_end":378,"column_start":5,"column_end":46}},{"value":"/ let variable = iteration.variable::<(usize, usize)>(\"source\");","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13707,"byte_end":13773,"line_start":379,"line_end":379,"column_start":5,"column_end":71}},{"value":"/ variable.extend((0 .. 10).map(|x| (x, x)));","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13778,"byte_end":13825,"line_start":380,"line_end":380,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13830,"byte_end":13833,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ while iteration.changed() {","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13838,"byte_end":13869,"line_start":382,"line_end":382,"column_start":5,"column_end":36}},{"value":"/     variable.from_map(&variable, |&(key, val)|","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13874,"byte_end":13924,"line_start":383,"line_end":383,"column_start":5,"column_end":55}},{"value":"/         if val % 2 == 0 {","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13929,"byte_end":13958,"line_start":384,"line_end":384,"column_start":5,"column_end":34}},{"value":"/             (key, val/2)","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13963,"byte_end":13991,"line_start":385,"line_end":385,"column_start":5,"column_end":33}},{"value":"/         }","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":13996,"byte_end":14009,"line_start":386,"line_end":386,"column_start":5,"column_end":18}},{"value":"/         else {","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14014,"byte_end":14032,"line_start":387,"line_end":387,"column_start":5,"column_end":23}},{"value":"/             (key, 3*val + 1)","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14037,"byte_end":14069,"line_start":388,"line_end":388,"column_start":5,"column_end":37}},{"value":"/         });","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14074,"byte_end":14089,"line_start":389,"line_end":389,"column_start":5,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14094,"byte_end":14099,"line_start":390,"line_end":390,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14104,"byte_end":14107,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ let result = variable.complete();","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14112,"byte_end":14149,"line_start":392,"line_end":392,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(result.len(), 74);","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14154,"byte_end":14187,"line_start":393,"line_end":393,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14192,"byte_end":14199,"line_start":394,"line_end":394,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":16137,"byte_end":16150,"line_start":427,"line_end":427,"column_start":12,"column_end":25},"name":"from_leapjoin","qualname":"<Variable<Tuple>>::from_leapjoin","value":"pub fn from_leapjoin<'leap, SourceTuple: Ord, Val: Ord + 'leap,\n                     impl Leapers<'leap, SourceTuple, Val>: Leapers,\n                     impl FnMut(&SourceTuple, &Val) -> Tuple: FnMut(&SourceTuple,\n                                                                    &Val) ->\n                     Tuple>(&Self, &Variable<SourceTuple>,\n                            impl Leapers<'leap, SourceTuple, Val>,\n                            impl FnMut(&SourceTuple, &Val) -> Tuple)","parent":null,"children":[],"decl_id":null,"docs":" Adds tuples that result from combining `source` with the\n relations given in `leapers`. This operation is very flexible\n and can be used to do a combination of joins and anti-joins.\n The main limitation is that the things being combined must\n consist of one dynamic variable (`source`) and then several\n fixed relations (`leapers`).","sig":null,"attributes":[{"value":"/ Adds tuples that result from combining `source` with the","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14346,"byte_end":14406,"line_start":399,"line_end":399,"column_start":5,"column_end":65}},{"value":"/ relations given in `leapers`. This operation is very flexible","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14411,"byte_end":14476,"line_start":400,"line_end":400,"column_start":5,"column_end":70}},{"value":"/ and can be used to do a combination of joins and anti-joins.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14481,"byte_end":14545,"line_start":401,"line_end":401,"column_start":5,"column_end":69}},{"value":"/ The main limitation is that the things being combined must","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14550,"byte_end":14612,"line_start":402,"line_end":402,"column_start":5,"column_end":67}},{"value":"/ consist of one dynamic variable (`source`) and then several","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14617,"byte_end":14680,"line_start":403,"line_end":403,"column_start":5,"column_end":68}},{"value":"/ fixed relations (`leapers`).","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14685,"byte_end":14717,"line_start":404,"line_end":404,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14722,"byte_end":14725,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ The idea is as follows:","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14730,"byte_end":14757,"line_start":406,"line_end":406,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14762,"byte_end":14765,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ - You will be inserting new tuples that result from joining (and anti-joining)","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14770,"byte_end":14852,"line_start":408,"line_end":408,"column_start":5,"column_end":87}},{"value":"/   some dynamic variable `source` of source tuples (`SourceTuple`)","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14857,"byte_end":14926,"line_start":409,"line_end":409,"column_start":5,"column_end":74}},{"value":"/   with some set of values (of type `Val`).","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14931,"byte_end":14977,"line_start":410,"line_end":410,"column_start":5,"column_end":51}},{"value":"/ - You provide these values by combining `source` with a set of leapers","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":14982,"byte_end":15056,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/   `leapers`, each of which is derived from a fixed relation. The `leapers`","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15061,"byte_end":15139,"line_start":412,"line_end":412,"column_start":5,"column_end":83}},{"value":"/   should be either a single leaper (of suitable type) or else a tuple of leapers.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15144,"byte_end":15229,"line_start":413,"line_end":413,"column_start":5,"column_end":90}},{"value":"/   You can create a leaper in one of two ways:","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15234,"byte_end":15283,"line_start":414,"line_end":414,"column_start":5,"column_end":54}},{"value":"/   - Extension: In this case, you have a relation of type `(K, Val)` for some","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15288,"byte_end":15368,"line_start":415,"line_end":415,"column_start":5,"column_end":85}},{"value":"/     type `K`. You provide a closure that maps from `SourceTuple` to the key","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15373,"byte_end":15452,"line_start":416,"line_end":416,"column_start":5,"column_end":84}},{"value":"/     `K`. If you use `relation.extend_with`, then any `Val` values the","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15457,"byte_end":15530,"line_start":417,"line_end":417,"column_start":5,"column_end":78}},{"value":"/     relation provides will be added to the set of values; if you use","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15535,"byte_end":15607,"line_start":418,"line_end":418,"column_start":5,"column_end":77}},{"value":"/     `extend_anti`, then the `Val` values will be removed.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15612,"byte_end":15673,"line_start":419,"line_end":419,"column_start":5,"column_end":66}},{"value":"/   - Filtering: In this case, you have a relation of type `K` for some","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15678,"byte_end":15751,"line_start":420,"line_end":420,"column_start":5,"column_end":78}},{"value":"/     type `K` and you provide a closure that maps from `SourceTuple` to","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15756,"byte_end":15830,"line_start":421,"line_end":421,"column_start":5,"column_end":79}},{"value":"/     the key `K`. Filters don't provide values but they remove source","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15835,"byte_end":15907,"line_start":422,"line_end":422,"column_start":5,"column_end":77}},{"value":"/     tuples.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15912,"byte_end":15927,"line_start":423,"line_end":423,"column_start":5,"column_end":20}},{"value":"/ - Finally, you get a callback `logic` that accepts each `(SourceTuple, Val)`","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":15932,"byte_end":16012,"line_start":424,"line_end":424,"column_start":5,"column_end":85}},{"value":"/   that was successfully joined (and not filtered) and which maps to the","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":16017,"byte_end":16092,"line_start":425,"line_end":425,"column_start":5,"column_end":80}},{"value":"/   type of this variable.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":16097,"byte_end":16125,"line_start":426,"line_end":426,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17358,"byte_end":17364,"line_start":465,"line_end":465,"column_start":12,"column_end":18},"name":"insert","qualname":"<Variable<Tuple>>::insert","value":"pub fn insert(&Self, Relation<Tuple>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a relation into the variable.","sig":null,"attributes":[{"value":"/ Inserts a relation into the variable.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17115,"byte_end":17156,"line_start":460,"line_end":460,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17161,"byte_end":17164,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ This is most commonly used to load initial values into a variable.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17169,"byte_end":17239,"line_start":462,"line_end":462,"column_start":5,"column_end":75}},{"value":"/ it is not obvious that it should be commonly used otherwise, but","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17244,"byte_end":17312,"line_start":463,"line_end":463,"column_start":5,"column_end":73}},{"value":"/ it should not be harmful.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17317,"byte_end":17346,"line_start":464,"line_end":464,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17765,"byte_end":17771,"line_start":476,"line_end":476,"column_start":12,"column_end":18},"name":"extend","qualname":"<Variable<Tuple>>::extend","value":"pub fn extend<T, impl IntoIterator<Item = T>: IntoIterator<Item =\n              T>>(&Self, impl IntoIterator<Item = T>) where\nRelation<Tuple>: FromIterator<T>","parent":null,"children":[],"decl_id":null,"docs":" Extend the variable with values from the iterator.","sig":null,"attributes":[{"value":"/ Extend the variable with values from the iterator.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17509,"byte_end":17563,"line_start":471,"line_end":471,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17568,"byte_end":17571,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ This is most commonly used to load initial values into a variable.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17576,"byte_end":17646,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/ it is not obvious that it should be commonly used otherwise, but","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17651,"byte_end":17719,"line_start":474,"line_end":474,"column_start":5,"column_end":73}},{"value":"/ it should not be harmful.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17724,"byte_end":17753,"line_start":475,"line_end":475,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":18271,"byte_end":18279,"line_start":489,"line_end":489,"column_start":12,"column_end":20},"name":"complete","qualname":"<Variable<Tuple>>::complete","value":"pub fn complete(Self) -> Relation<Tuple>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the variable and returns a relation.","sig":null,"attributes":[{"value":"/ Consumes the variable and returns a relation.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17943,"byte_end":17992,"line_start":483,"line_end":483,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":17997,"byte_end":18000,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ This method removes the ability for the variable to develop, and","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":18005,"byte_end":18073,"line_start":485,"line_end":485,"column_start":5,"column_end":73}},{"value":"/ flattens all internal tuples down to one relation. The method","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":18078,"byte_end":18143,"line_start":486,"line_end":486,"column_start":5,"column_end":70}},{"value":"/ asserts that iteration has completed, in that `self.recent` and","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":18148,"byte_end":18215,"line_start":487,"line_end":487,"column_start":5,"column_end":72}},{"value":"/ `self.to_add` should both be empty.","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":18220,"byte_end":18259,"line_start":488,"line_end":488,"column_start":5,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38397,"byte_end":38409,"line_start":134,"line_end":134,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38775,"byte_end":38787,"line_start":147,"line_end":147,"column_start":65,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":39596,"byte_end":39608,"line_start":169,"line_end":169,"column_start":60,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40956,"byte_end":40967,"line_start":206,"line_end":206,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":41343,"byte_end":41354,"line_start":219,"line_end":219,"column_start":65,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":43308,"byte_end":43316,"line_start":275,"line_end":275,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":45051,"byte_end":45061,"line_start":337,"line_end":337,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":45666,"byte_end":45676,"line_start":357,"line_end":357,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":46848,"byte_end":46858,"line_start":386,"line_end":386,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":47985,"byte_end":47995,"line_start":425,"line_end":425,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":48573,"byte_end":48583,"line_start":443,"line_end":443,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":50095,"byte_end":50105,"line_start":489,"line_end":489,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":50674,"byte_end":50684,"line_start":507,"line_end":507,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":51522,"byte_end":51532,"line_start":531,"line_end":531,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":52777,"byte_end":52787,"line_start":575,"line_end":575,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":53379,"byte_end":53389,"line_start":593,"line_end":593,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":54227,"byte_end":54237,"line_start":617,"line_end":617,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1293,"byte_end":1301,"line_start":44,"line_end":44,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":394},{"krate":0,"index":399},{"krate":0,"index":403},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5579,"byte_end":5587,"line_start":167,"line_end":167,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5724,"byte_end":5732,"line_start":173,"line_end":173,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5979,"byte_end":5987,"line_start":182,"line_end":182,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6215,"byte_end":6223,"line_start":191,"line_end":191,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6649,"byte_end":6658,"line_start":207,"line_end":207,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9626,"byte_end":9634,"line_start":280,"line_end":280,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":450},{"krate":0,"index":454},{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":16488,"byte_end":16496,"line_start":437,"line_end":437,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":16788,"byte_end":16796,"line_start":449,"line_end":449,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":18644,"byte_end":18652,"line_start":500,"line_end":500,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/join.rs","byte_start":25548,"byte_end":25552,"line_start":138,"line_end":138,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":2093},"to":{"krate":0,"index":53}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38397,"byte_end":38409,"line_start":134,"line_end":134,"column_start":30,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":113},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":38775,"byte_end":38787,"line_start":147,"line_end":147,"column_start":65,"column_end":77},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":113},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":39596,"byte_end":39608,"line_start":169,"line_end":169,"column_start":60,"column_end":72},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":113},"to":{"krate":0,"index":94}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":40956,"byte_end":40967,"line_start":206,"line_end":206,"column_start":35,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":41343,"byte_end":41354,"line_start":219,"line_end":219,"column_start":65,"column_end":76},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":139},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":43308,"byte_end":43316,"line_start":275,"line_end":275,"column_start":55,"column_end":63},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":556},"to":{"krate":0,"index":160}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":45051,"byte_end":45061,"line_start":337,"line_end":337,"column_start":40,"column_end":50},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":205},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":45666,"byte_end":45676,"line_start":357,"line_end":357,"column_start":13,"column_end":23},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":205},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":46848,"byte_end":46858,"line_start":386,"line_end":386,"column_start":13,"column_end":23},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":205},"to":{"krate":0,"index":94}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":47985,"byte_end":47995,"line_start":425,"line_end":425,"column_start":40,"column_end":50},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":48573,"byte_end":48583,"line_start":443,"line_end":443,"column_start":13,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":254},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":50095,"byte_end":50105,"line_start":489,"line_end":489,"column_start":40,"column_end":50},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":50674,"byte_end":50684,"line_start":507,"line_end":507,"column_start":13,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":289},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":51522,"byte_end":51532,"line_start":531,"line_end":531,"column_start":13,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":289},"to":{"krate":0,"index":94}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":52777,"byte_end":52787,"line_start":575,"line_end":575,"column_start":40,"column_end":50},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":53379,"byte_end":53389,"line_start":593,"line_end":593,"column_start":13,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":330},"to":{"krate":0,"index":103}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/treefrog.rs","byte_start":54227,"byte_end":54237,"line_start":617,"line_end":617,"column_start":13,"column_end":23},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":330},"to":{"krate":0,"index":94}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":1293,"byte_end":1301,"line_start":44,"line_end":44,"column_start":18,"column_end":26},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5579,"byte_end":5587,"line_start":167,"line_end":167,"column_start":39,"column_end":47},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":1999}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5724,"byte_end":5732,"line_start":173,"line_end":173,"column_start":42,"column_end":50},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":5527}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":5979,"byte_end":5987,"line_start":182,"line_end":182,"column_start":74,"column_end":82},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":5527}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6215,"byte_end":6223,"line_start":191,"line_end":191,"column_start":38,"column_end":46},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":2283}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":6649,"byte_end":6658,"line_start":207,"line_end":207,"column_start":6,"column_end":15},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":9626,"byte_end":9634,"line_start":280,"line_end":280,"column_start":18,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":434},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":16488,"byte_end":16496,"line_start":437,"line_end":437,"column_start":28,"column_end":36},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":434},"to":{"krate":2,"index":1772}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":16788,"byte_end":16796,"line_start":449,"line_end":449,"column_start":18,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":434},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/haochenz/.cargo/registry/src/github.com-1ecc6299db9ec823/datafrog-2.0.1/src/lib.rs","byte_start":18644,"byte_end":18652,"line_start":500,"line_end":500,"column_start":36,"column_end":44},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":434},"to":{"krate":0,"index":432}}]}